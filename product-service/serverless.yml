service: product-service

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: ${env:AWS_REGION}
  profile: ${env:AWS_PROFILE}
  # lambda roles
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource:
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:ARN_ID}:table/${env:PRODUCTS_TABLE_NAME_DYNAMODB}
        - arn:aws:dynamodb:${env:AWS_REGION}:${env:ARN_ID}:table/${env:STOCKS_TABLE_NAME_DYNAMODB}
    - Effect: Allow
      Action: sns:*
      Resource:
        Ref: SNSTopic

  environment:
    SNS_ARN:
      Ref: SNSTopic

plugins:
  - serverless-webpack

custom:
  snsName: createProductTopic
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true # auto-packing of external modules

  environment:
    PRODUCTS_TABLE_NAME: ${env:PRODUCTS_TABLE_NAME_DYNAMODB}
    STOCKS_TABLE_NAME: ${env:STOCKS_TABLE_NAME_DYNAMODB}
    RDS_PORT: ${env:RDS_PORT}
    RDS_HOST: ${env:RDS_HOST}
    RDS_USERNAME: ${env:RDS_USERNAME}
    RDS_DB_NAME: ${env:RDS_DB_NAME}
    RDS_PASS: ${env:RDS_PASS}

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsName}
    SNSTopicSubscription1:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:WORK_EMAIL}
        Protocol: email
        FilterPolicy:
          createdQuantity: [{"numeric": ["<=", 2]}]
        TopicArn:
          Ref: SNSTopic
    SNSTopicSubscription2:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:PERSONAL_EMAIL}
        Protocol: email
        FilterPolicy:
          createdQuantity: [{"numeric": [">", 2]}]
        TopicArn:
          Ref: SNSTopic

package:
  individually: true

  patterns:
    - '!node_modules/**'
    - '!gitignore'
    - '!package-lock.json'
    - '!package.json'
    - '!jest.config.js'
    - '!__tests__/**'
    - '!scripts/**'

functions:
  getProductsList:
    handler: lambdas/getProductsList.getProductsList
    environment: ${self:custom.environment}
    events:
      - http:
          path: products
          method: get
          cors: true
#          authorizer:
#            name: testCognitoAuthCloudx
#            type: COGNITO_USER_POOLS
#            arn: arn:aws:cognito-idp:${env:AWS_REGION}:${env:ARN_ID}:userpool/${env:AWS_REGION}_87fgtYU
#             # scopes: # possible permissions scopes
  getProductById:
    handler: lambdas/getProductById.getProductById
    environment: ${self:custom.environment}
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true

  createProduct:
    handler: lambdas/createProduct.createProduct
    environment: ${self:custom.environment}
    events:
      - http:
          path: products
          method: post
          cors: true

  catalogBatchProcess:
    handler: lambdas/catalogBatchProcess.catalogBatchProcess
    environment: ${self:custom.environment}
    events:
      - sqs:
          batchSize: 5
          arn: arn:aws:sqs:${env:AWS_REGION}:${env:ARN_ID}:${env:SQS_NAME}
